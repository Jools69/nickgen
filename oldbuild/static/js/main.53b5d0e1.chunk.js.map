{"version":3,"sources":["ColoursSlider.js","ColourPickers.js","CodedNick.js","Character.js","CheckBox.js","hooks/useLocalStorageState.js","hooks/useLocalStorageReducer.js","NickGenerator.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["ColoursSlider","props","numberOfColours","maxNumOfColours","handleSliderChange","className","min","max","dots","value","onChange","ColourPickers","colours","updateColour","pickers","map","c","i","id","type","e","target","CodedNick","codedString","nick","colour","bold","strikethrough","underline","italic","char","join","onClick","navigator","clipboard","writeText","Character","fontWeight","textDec","fontStyle","style","color","textDecoration","CheckBox","label","name","handleChange","checked","for","useLocalStorageState","key","defaultValue","useState","val","JSON","parse","localStorage","getItem","String","state","setState","useEffect","setItem","stringify","useLocalStorageReducer","reducer","useReducer","dispatch","globalStylesReducer","action","field","globalStyleState","NickGenerator","setColours","setNumberOfColours","magic","setName","gradient","chroma","scale","mode","characters","handleCheckedChange","tempName","mapAttrToName","mapGradientToName","n","offset","length","attr","maxLength","placeholder","newName","slice","push","charAt","onKeyDown","preventDefault","newColours","concat","splice","numberOfPickers","index","newColour","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53b5d0e1.chunk.js","sourcesContent":["import Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport './styles/ColoursSlider.css';\n\nfunction ColoursSlider(props) {\n    const { numberOfColours, maxNumOfColours, handleSliderChange } = props;\n\n    return (\n        <div className=\"slider\">\n            <p>Number of main colours</p>\n            <Slider \n                min={2}\n                max={maxNumOfColours}\n                dots={true}\n                value={numberOfColours}\n                onChange={handleSliderChange}/>\n            <span>{numberOfColours}</span>\n        </div>\n    );\n}\n\nexport default ColoursSlider;","import './styles/ColourPickers.css';\n\nfunction ColourPickers(props) {\n    const { colours, updateColour } = props;\n\n    const pickers = colours.map((c, i) => {\n        return (\n            <input \n                key={i} \n                id={i} \n                type=\"color\"\n                value={c}\n                className=\"colourPicker\"\n                onChange={(e) => updateColour(i, e.target.value)}/>\n        );\n    });\n\n    return (\n        <div className=\"pickerContainer\">\n            <form>\n                {pickers}\n            </form>\n        </div>\n    );\n}\n\nexport default ColourPickers;\n","import './styles/CodedNick.css';\n\nfunction CodedNick(props) {\n\n    const { nick } = props;\n\n    const codedString = '/nick ' + nick.map((c) => {\n        return `&${c.colour}${c.bold ? '&l' : ''}${c.strikethrough ? '&m' : ''}${c.underline ? '&n' : ''}${c.italic ? '&o' : ''}${c.char}`\n    }).join('');\n\n    return (\n        <div className=\"codedNick\">\n            <div className=\"commandString\">\n                <p>\n                    {codedString}\n                </p>\n            </div>\n            <button\n                className=\"copyButton\"\n                onClick={(e) => { navigator.clipboard.writeText(codedString);\n                                }}>\n                Copy text\n            </button>\n        </div>\n    );\n}\n\nexport default CodedNick;","import React from 'react';\nimport './styles/Character.css';\n\nfunction Character(props) {\n\nconst { colour, value, bold, strikethrough, italic, underline } = props;\n\n    const fontWeight = bold ? 700 : 400;\n    const textDec = `${strikethrough?'line-through ':''}${underline?'underline ':''}`;\n    const fontStyle = `${italic?'italic':'normal'}`;\n    return (\n        <span className=\"Character\" \n              style={{ \n                    color: colour, \n                    fontWeight: fontWeight,\n                    fontStyle: fontStyle,\n                    textDecoration: textDec }}\n        >{value}</span>\n    );\n}\n\nexport default Character;","import React from 'react';\nimport './styles/CheckBox.css';\n\nfunction CheckBox(props) {\n\n    const { label, name, handleChange, checked } = props;\n\n    return (\n            <div className=\"CheckBox\">\n                <label for={name}>{label}</label>\n                <input type=\"checkbox\" id={name} name={name} onChange={handleChange} checked={checked ? 'checked' : ''}/>\n            </div>\n    );\n}\n\nexport default CheckBox;","import { useState, useEffect } from 'react';\n\nfunction useLocalStorageState(key, defaultValue) {\n    // Make piece of state based on local storage, or default\n    const [state, setState] = useState(() => {\n        let val;\n        try {\n            val = JSON.parse(localStorage.getItem(key) || String(defaultValue));\n        }\n        catch (e) {\n            val = defaultValue;\n        }\n        return val;\n    });\n\n    // Use useEffect to update local storage when state changes.\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(state));\n    }, [key, state]);\n\n    return [state, setState];\n}\n\nexport default useLocalStorageState;","import { useReducer, useEffect } from 'react';\n\nfunction useLocalStorageReducer(key, defaultValue, reducer) {\n    // Make piece of state based on local storage, or default\n\n    const [state, dispatch] = useReducer(reducer, defaultValue, () => {\n        let val;\n        try {\n            val = JSON.parse(localStorage.getItem(key) || String(defaultValue));\n        }\n        catch (e) {\n            val = defaultValue;\n        }\n        return val;\n    });\n\n    // Use useEffect to update local storage when state changes.\n    \n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(state));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state]);\n    \n\n    return [state, dispatch];\n}\n\nexport default useLocalStorageReducer;","import React, { useEffect } from 'react';\nimport chroma from 'chroma-js';\nimport './styles/NickGenerator.css';\nimport ColoursSlider from './ColoursSlider';\nimport ColourPickers from './ColourPickers';\nimport CodedNick from './CodedNick';\nimport Character from './Character';\nimport CheckBox from './CheckBox';\nimport useLocalStorageState from './hooks/useLocalStorageState';\nimport useLocalStorageReducer from './hooks/useLocalStorageReducer';\n\n\nfunction globalStylesReducer(state, action) {\n    switch (action.type) {\n        case 'field':\n            return {...state, [action.field]: action.value};\n        case  'name':\n            return state;\n        default:\n            return state;\n    }\n}\n\nconst globalStyleState = {\n    bold: false,\n    underline: false,\n    strikethrough: false,\n    italic: false,\n};\n\nfunction NickGenerator() {\n\n    let initialNick = [\n        {\n            bold: false,\n            strikethrough: false,\n            underline: false,\n            magic: false,\n            char: 'N',\n            colour: '#ffffff'\n        },\n        {\n            bold: false,\n            strikethrough: false,\n            underline: false,\n            magic: false,\n            char: 'i',\n            colour: '#ffffff'\n        },\n        {\n            bold: false,\n            strikethrough: false,\n            underline: false,\n            magic: false,\n            char: 'c',\n            colour: '#ffffff'\n        },\n        {\n            bold: false,\n            strikethrough: false,\n            underline: false,\n            magic: false,\n            char: 'k',\n            colour: '#ffffff'\n        }\n    ];\n\n    const [colours, setColours] = useLocalStorageState('colours', ['#ff00ff', '#00ff00']);\n    const [numberOfColours, setNumberOfColours] = useLocalStorageState('numOfColours', 2);\n    const [name, setName] = useLocalStorageState('nickname', initialNick);\n    const maxColours = 5;\n\n    // const [state, dispatch] = useReducer(globalStylesReducer, globalStyleState);\n    const [state, dispatch] = useLocalStorageReducer('globalStyles', globalStyleState, globalStylesReducer);\n\n    let gradient = chroma.scale(colours).mode('lab');\n\n    let characters = name.map((c, i) => {\n        return (<Character key={i} \n                           colour={c.colour} \n                           value={c.char} \n                           bold={c.bold} \n                           italic={c.italic}\n                           strikethrough={c.strikethrough}\n                           underline={c.underline}/>);\n    });\n\n    const updateNumberOfColours = (e) => {\n        setNumberOfColours(e);\n        const newColours = [...colours].concat(['#ffffff', '#ffffff']).splice(0, e);\n        setColours(newColours);\n    };\n\n    const updateColour = (index, newColour) => {\n        const newColours = [...colours];\n        newColours[index] = newColour;\n        setColours(newColours);\n    }\n\n    const handleCheckedChange = (e) => {\n        const value = e.target.checked;\n        const field = e.target.name;\n        dispatch({type: 'field', field, value});\n    \n        let tempName = [...name];\n        tempName = mapAttrToName(tempName, e.target.name, value);\n        setName(tempName);\n    }\n\n    const handleKeyDown = (e) => {\n        // we need to ensure that any spaces the user enters are ignored.\n        if(e.key === \" \")\n            e.preventDefault();\n    }\n\n    const handleNickChange = (e) => {\n        // Pull out the updated name from the input\n        const newName = e.target.value;\n\n        // Create a copy of the current name array\n        let tempName = [...name];\n\n        // If the new name is less than the current name, we need to truncate the copy to match;\n        if (newName.length < tempName.length)\n            tempName = tempName.slice(0, newName.length);\n        else if (newName.length > tempName.length) {\n            // We need to append instances of the char object onto tempName until it's the correct length.\n            while (newName.length > tempName.length) {\n                tempName.push({\n                    bold: state.bold,\n                    strikethrough: state.strikethrough,\n                    underline: state.underline,\n                    italic: state.italic,\n                    magic: false,\n                    char: '',\n                    colour: '#ffffff'\n                });\n            }\n        }\n        // At this point, tempName = the correct length of newName.\n        // Now we need to map the characters from the new name into the tempName object\n        tempName = tempName.map((c, i) => {\n            return (\n                { ...c, char: newName.charAt(i) }\n            );\n        });\n\n        // and update the state.\n        tempName = mapGradientToName(tempName);\n        setName(tempName);\n    }\n\n    const mapGradientToName = (n) => {\n        // Copy the current name object into a temp placeholder.\n        const tempName = n.map((c, i) => {\n            const offset = (1.0 / (n.length - 1)) * i;\n            return ({ ...c, colour: gradient(offset) });\n        });\n        return tempName;\n    }\n\n    const mapAttrToName = (n, attr, val) => {\n        return n.map(c => ({...c, [attr]:val}));\n    }\n\n    useEffect(() => {\n        setName(mapGradientToName(name));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [colours]);\n\n    return (\n        <div className=\"container\">\n            <div className=\"controlPanel\">\n                <CheckBox label='All Bold' name='bold' handleChange={handleCheckedChange} checked={state.bold} />\n                <CheckBox label='All Underline' name='underline' handleChange={handleCheckedChange} checked={state.underline} />\n                <CheckBox label='All Strikethrough' name='strikethrough' handleChange={handleCheckedChange} checked={state.strikethrough} />\n                <CheckBox label='All Italic' name='italic' handleChange={handleCheckedChange} checked={state.italic} />\n            </div>\n            <div className=\"NickGenerator\">\n                <div className=\"nameInput\">\n                    <div><label for=\"name\">Enter your nick:</label></div>\n                    <input\n                        maxLength=\"16\"\n                        type=\"text\"\n                        id=\"name\"\n                        value={name.map(c => c.char).join('')}\n                        placeholder=\"nick\"\n                        onChange={handleNickChange} \n                        onKeyDown={handleKeyDown}/>\n                </div>\n                <div className=\"Colours\">\n                    {characters}\n                </div>\n                <ColoursSlider\n                    numberOfColours={numberOfColours}\n                    maxNumOfColours={maxColours}\n                    handleSliderChange={updateNumberOfColours} />\n                <div>\n                    <ColourPickers colours={colours} numberOfPickers={numberOfColours} updateColour={updateColour} />\n                </div>\n                <CodedNick nick={name} />\n            </div>\n        </div>\n    );\n}\n\nexport default NickGenerator;","import React from 'react';\nimport './styles/FooterStyles.css';\n\nfunction Footer(props) {\n\n    return (\n        <div>\n            <div className=\"footer\">\n                    <div className=\"logo\">\n                        <p className=\"copyright\">\n                            NickGen - Site design © 2021 Jools. All rights reserved.\n                        </p>\n                    </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Footer;","import './App.css';\nimport NickGenerator from './NickGenerator';\nimport Footer from './Footer';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to  <span style={{color:\"#ff00ff\"}}>N</span>\n                        <span style={{color:\"#f167e1\"}}>i</span>\n                        <span style={{color:\"#e091c2\"}}>c</span>\n                        <span style={{color:\"#c9b2a2\"}}>k</span>\n                        <span style={{color:\"#abce80\"}}>G</span>\n                        <span style={{color:\"#7fe757\"}}>e</span>\n                        <span style={{color:\"#00ff00\"}}>n</span>\n                        </h1>\n        <h3>Jools's coloured nickname generator for Minecraft</h3>\n        <NickGenerator />\n      </header>\n      <Footer className=\"App-footer\"/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}